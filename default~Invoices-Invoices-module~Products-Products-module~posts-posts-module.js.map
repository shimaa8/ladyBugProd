{"version":3,"sources":["../../../../../../src/material/paginator/paginator-intl.ts","../../../../../../src/material/paginator/paginator.ts","../../../../../../src/material/paginator/paginator-module.ts","../../../../../../src/material/paginator/public-api.ts","../../../../../../src/material/paginator/index.ts"],"names":[],"mappings":"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","file":"default~Invoices-Invoices-module~Products-Products-module~posts-posts-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel: (page: number, pageSize: number, length: number) => string =\n    (page: number, pageSize: number, length: number) => {\n      if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n      length = Math.max(length, 0);\n\n      const startIndex = page * pageSize;\n\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      const endIndex = startIndex < length ?\n          Math.min(startIndex + pageSize, length) :\n          startIndex + pageSize;\n\n      return `${startIndex + 1} â ${endIndex} of ${length}`;\n    }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceNumberProperty,\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\nimport {MatFormFieldAppearance} from '@angular/material/form-field';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n\n/** Object that can be used to configure the default options for the paginator module. */\nexport interface MatPaginatorDefaultOptions {\n  /** Number of items to display on a page. By default set to 50. */\n  pageSize?: number;\n\n  /** The set of provided page size options to display to the user. */\n  pageSizeOptions?: number[];\n\n  /** Whether to hide the page size selection UI from the user. */\n  hidePageSize?: boolean;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  showFirstLastButtons?: boolean;\n\n  /** The default form-field appearance to apply to the page size options selector. */\n  formFieldAppearance?: MatFormFieldAppearance;\n}\n\n/** Injection token that can be used to provide the default options for the paginator module. */\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS =\n    new InjectionToken<MatPaginatorDefaultOptions>('MAT_PAGINATOR_DEFAULT_OPTIONS');\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  /** If set, styles the \"page size\" form field with the designated style. */\n  _formFieldAppearance?: MatFormFieldAppearance;\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_PAGINATOR_DEFAULT_OPTIONS)\n                  defaults?: MatPaginatorDefaultOptions) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons,\n        formFieldAppearance,\n      } = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n\n      if (formFieldAppearance != null) {\n        this._formFieldAppearance = formFieldAppearance;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n  static ngAcceptInputType_pageIndex: NumberInput;\n  static ngAcceptInputType_length: NumberInput;\n  static ngAcceptInputType_pageSize: NumberInput;\n  static ngAcceptInputType_hidePageSize: BooleanInput;\n  static ngAcceptInputType_showFirstLastButtons: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}