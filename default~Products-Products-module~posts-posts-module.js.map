{"version":3,"sources":["../../../../../../src/material/sort/sort-errors.ts","../../../../../../src/material/sort/sort.ts","../../../../../../src/material/sort/sort-animations.ts","../../../../../../src/material/sort/sort-header-intl.ts","../../../../../../src/material/sort/sort-header.ts","../../../../../../src/material/sort/sort-module.ts","../../../../../../src/material/sort/sort-direction.ts","../../../../../../src/material/sort/public-api.ts","../../../../../../src/material/sort/index.ts"],"names":[],"mappings":"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","file":"default~Products-Products-module~posts-posts-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  host: {'class': 'mat-sort'},\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (direction && direction !== 'asc' && direction !== 'desc' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /**\n   * ARIA label for the sorting button.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n  ElementRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    'class': 'mat-sort-header',\n    '(click)': '_handleClick()',\n    '(keydown)': '_handleKeydown($event)',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit, AfterViewInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n              // tslint:disable-next-line: lightweight-tokens\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef,\n              private _focusMonitor: FocusMonitor,\n              private _elementRef: ElementRef<HTMLElement>) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor.monitor(this._elementRef, true)\n        .subscribe(origin => this._setIndicatorHintVisible(!!origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _toggleOnInteraction() {\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._toggleOnInteraction();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n      event.preventDefault();\n      this._toggleOnInteraction();\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type SortDirection = 'asc' | 'desc' | '';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sort-module';\nexport * from './sort-direction';\nexport * from './sort-header';\nexport * from './sort-header-intl';\nexport * from './sort';\nexport * from './sort-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}